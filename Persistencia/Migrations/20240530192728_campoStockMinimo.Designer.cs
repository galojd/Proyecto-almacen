// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(AlmacenOnlineContext))]
    [Migration("20240530192728_campoStockMinimo")]
    partial class campoStockMinimo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.entities.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.Property<Guid>("CompraPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MetodoPagoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("MontoPago")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("CompraPagoId");

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("CompraPago");
                });

            modelBuilder.Entity("Dominio.entities.DatosEscaneo", b =>
                {
                    b.Property<Guid>("DatosEscaneoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnteriorStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NuevoStock")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DatosEscaneoId");

                    b.ToTable("DatosEscaneo");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.Property<Guid>("DetalleInventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StockAnterior")
                        .HasColumnType("int");

                    b.Property<int?>("StockIngreso")
                        .HasColumnType("int");

                    b.Property<int?>("StockTotal")
                        .HasColumnType("int");

                    b.HasKey("DetalleInventarioId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleInventario");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Property<Guid>("DetallePedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DetallePedidoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.Property<Guid>("DevolucionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DetallePedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.HasKey("DevolucionId");

                    b.HasIndex("DetallePedidoId");

                    b.ToTable("Devolucion");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Property<Guid>("InventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CantidadProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Inventario");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.Property<Guid>("InventarioProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fechaentrega")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioProductoId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("InventarioProducto");
                });

            modelBuilder.Entity("Dominio.entities.MetodoPago", b =>
                {
                    b.Property<Guid>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoMetodo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodoPago");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Property<Guid>("PrecioWebId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioWebId");

                    b.ToTable("PrecioWeb");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.Property<Guid>("PrecioWebProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnteriorPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NuevoPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PrecioWebId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrecioWebProductoId");

                    b.HasIndex("PrecioWebId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PrecioWebProducto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Property<Guid>("ProductoProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Preciocompra")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Preciounitario")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ProductoProveedorId");

                    b.ToTable("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Property<Guid>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Property<Guid>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.HasOne("Dominio.entities.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId");

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Inventario");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Dominio.entities.Venta", "Venta")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.HasOne("Dominio.entities.DetallePedido", "DetallePedido")
                        .WithMany("Devolucionlista")
                        .HasForeignKey("DetallePedidoId");

                    b.Navigation("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.HasOne("Dominio.entities.Proveedor", "Proveedor")
                        .WithMany("Inventariolista")
                        .HasForeignKey("ProveedorId");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("InventarioProductolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("InventarioProducto")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("Inventario");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.HasOne("Dominio.entities.PrecioWeb", "PrecioWeb")
                        .WithMany("PrecioWeblista")
                        .HasForeignKey("PrecioWebId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("PrecioWebProductolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("PrecioWeb");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.HasOne("Dominio.entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("Proveedorlista")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.HasOne("Dominio.entities.Cliente", "Cliente")
                        .WithMany("Ventalista")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Navigation("Ventalista");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Navigation("Devolucionlista");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("InventarioProductolista");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Navigation("PrecioWeblista");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("DetallePedidolista");

                    b.Navigation("PrecioWebProductolista");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Navigation("InventarioProducto");

                    b.Navigation("Proveedorlista");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Navigation("Inventariolista");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Navigation("DetallePedidolista");
                });
#pragma warning restore 612, 618
        }
    }
}
