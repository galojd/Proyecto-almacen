// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(AlmacenOnlineContext))]
    [Migration("20240603044835_Integrarseeders")]
    partial class Integrarseeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.entities.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            CategoriaId = new Guid("7e0d270c-8356-4725-838a-8d16fd9ce811"),
                            NombreCategoria = "Placa madre"
                        },
                        new
                        {
                            CategoriaId = new Guid("e3d666f0-db18-4931-8a61-c67a1e31a0b3"),
                            NombreCategoria = "Tarjeta gráfica"
                        },
                        new
                        {
                            CategoriaId = new Guid("aa2b875c-822d-4a54-a2fc-3daf1798c499"),
                            NombreCategoria = "Fuente de alimentación"
                        },
                        new
                        {
                            CategoriaId = new Guid("654c4ca9-57ad-47e1-bd56-019144664a1d"),
                            NombreCategoria = "Memoria RAM"
                        },
                        new
                        {
                            CategoriaId = new Guid("856e2097-4112-44c1-b34f-a5c499e60961"),
                            NombreCategoria = "Disco duro SSD"
                        },
                        new
                        {
                            CategoriaId = new Guid("fa59a80d-0627-42cd-a003-cf2287662f59"),
                            NombreCategoria = "Procesador"
                        });
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            ClienteId = new Guid("e374f4e0-f6f6-429e-bb67-4daf4e7093e6"),
                            DNI = "38457314",
                            Direccion = "Calle C, 55, Piura",
                            Email = "usuario229@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5429),
                            Nombres = "Sofía Carlos",
                            RUC = "20428729201",
                            Telefono = "781818429"
                        },
                        new
                        {
                            ClienteId = new Guid("143c088a-19c7-4406-8560-df39e522f186"),
                            DNI = "69199362",
                            Direccion = "Calle E, 79, Lima",
                            Email = "comprador616@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5439),
                            Nombres = "Ana Pedro",
                            RUC = "20428729201",
                            Telefono = "546691678"
                        },
                        new
                        {
                            ClienteId = new Guid("be9bac9c-ec5e-4d6c-9e2a-8b4d65180fbf"),
                            DNI = "50064378",
                            Direccion = "Calle E, 7, Trujillo",
                            Email = "usuario513@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5447),
                            Nombres = "Pedro Luis",
                            RUC = "20428729201",
                            Telefono = "591640556"
                        },
                        new
                        {
                            ClienteId = new Guid("95824d62-1390-40eb-bcd0-05af6ddab3de"),
                            DNI = "10791289",
                            Direccion = "Calle C, 56, Arequipa",
                            Email = "usuario936@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5456),
                            Nombres = "Lucía Sofía",
                            RUC = "20428729201",
                            Telefono = "204031731"
                        },
                        new
                        {
                            ClienteId = new Guid("592541f6-66fb-4dbd-8052-d8ec202e9599"),
                            DNI = "28863153",
                            Direccion = "Calle A, 57, Cusco",
                            Email = "comprador129@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5463),
                            Nombres = "Pedro Lucía",
                            RUC = "20428729201",
                            Telefono = "600452551"
                        },
                        new
                        {
                            ClienteId = new Guid("83625041-3d72-4257-9020-043b77a6e152"),
                            DNI = "31620370",
                            Direccion = "Calle D, 70, Piura",
                            Email = "correo361@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5471),
                            Nombres = "Lucía Ana",
                            RUC = "20428729201",
                            Telefono = "401348121"
                        },
                        new
                        {
                            ClienteId = new Guid("231bcf78-2646-4eb5-97e4-68a48399ec9e"),
                            DNI = "40210063",
                            Direccion = "Calle B, 64, Cusco",
                            Email = "correo148@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5478),
                            Nombres = "Sofía Diego",
                            RUC = "20428729201",
                            Telefono = "153043378"
                        },
                        new
                        {
                            ClienteId = new Guid("dacc4543-f3cc-48b7-871a-1f424e7e9a17"),
                            DNI = "94764976",
                            Direccion = "Calle A, 8, Piura",
                            Email = "contacto614@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5489),
                            Nombres = "Carlos Juan",
                            RUC = "20428729201",
                            Telefono = "767190077"
                        },
                        new
                        {
                            ClienteId = new Guid("f46d3220-59f1-45ec-a2de-1482a6e55290"),
                            DNI = "90848440",
                            Direccion = "Calle C, 21, Arequipa",
                            Email = "contacto357@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5495),
                            Nombres = "Ana Diego",
                            RUC = "20428729201",
                            Telefono = "803750689"
                        },
                        new
                        {
                            ClienteId = new Guid("58e8f5b8-7f3a-4a0f-999d-63297b203270"),
                            DNI = "41842164",
                            Direccion = "Calle E, 73, Trujillo",
                            Email = "correo955@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5535),
                            Nombres = "María María",
                            RUC = "20428729201",
                            Telefono = "908579655"
                        },
                        new
                        {
                            ClienteId = new Guid("863d2e77-544e-4cd9-85bb-16bf721afc72"),
                            DNI = "54035101",
                            Direccion = "Calle C, 96, Arequipa",
                            Email = "comprador187@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5543),
                            Nombres = "Laura Lucía",
                            RUC = "20428729201",
                            Telefono = "622906551"
                        },
                        new
                        {
                            ClienteId = new Guid("57fdb539-a698-4f39-a587-28a0f0528ad1"),
                            DNI = "99386184",
                            Direccion = "Calle A, 3, Cusco",
                            Email = "usuario184@gmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5550),
                            Nombres = "Ana Pedro",
                            RUC = "20428729201",
                            Telefono = "522882105"
                        },
                        new
                        {
                            ClienteId = new Guid("4f1620f2-4495-436c-98b6-60741fd60686"),
                            DNI = "71424380",
                            Direccion = "Calle E, 74, Cusco",
                            Email = "contacto727@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5556),
                            Nombres = "Ana Diego",
                            RUC = "20428729201",
                            Telefono = "802401673"
                        },
                        new
                        {
                            ClienteId = new Guid("f3b2d9d7-c142-4c66-a735-b6db66eece8e"),
                            DNI = "26815696",
                            Direccion = "Calle E, 92, Piura",
                            Email = "comprador5@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5563),
                            Nombres = "María Laura",
                            RUC = "20428729201",
                            Telefono = "247452158"
                        },
                        new
                        {
                            ClienteId = new Guid("6a1c2d0b-8e95-43b8-b5a8-2c9a7042fc59"),
                            DNI = "62229502",
                            Direccion = "Calle A, 74, Cusco",
                            Email = "cliente140@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5570),
                            Nombres = "María María",
                            RUC = "20428729201",
                            Telefono = "428856182"
                        },
                        new
                        {
                            ClienteId = new Guid("85aa8cca-5626-42fd-8578-b7f878980f5d"),
                            DNI = "35118427",
                            Direccion = "Calle E, 15, Cusco",
                            Email = "correo983@hotmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5579),
                            Nombres = "Lucía Laura",
                            RUC = "20428729201",
                            Telefono = "517216437"
                        },
                        new
                        {
                            ClienteId = new Guid("d205a35b-7f0b-4eb4-b726-12ec7cbb7240"),
                            DNI = "57007629",
                            Direccion = "Calle E, 18, Arequipa",
                            Email = "comprador60@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5586),
                            Nombres = "Lucía Carlos",
                            RUC = "20428729201",
                            Telefono = "737971538"
                        },
                        new
                        {
                            ClienteId = new Guid("548cac2f-b7fa-4470-b0a3-92d1d5bac64a"),
                            DNI = "78325890",
                            Direccion = "Calle A, 48, Cusco",
                            Email = "cliente957@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5593),
                            Nombres = "Laura María",
                            RUC = "20428729201",
                            Telefono = "166929531"
                        },
                        new
                        {
                            ClienteId = new Guid("6d3bd710-da8e-4789-862b-964144eab326"),
                            DNI = "36956740",
                            Direccion = "Calle E, 42, Lima",
                            Email = "usuario257@gmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5599),
                            Nombres = "Laura Ana",
                            RUC = "20428729201",
                            Telefono = "568955331"
                        },
                        new
                        {
                            ClienteId = new Guid("00a56b0c-f2cc-431f-8a12-5ab2a505e722"),
                            DNI = "39634982",
                            Direccion = "Calle C, 32, Cusco",
                            Email = "contacto634@hotmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5606),
                            Nombres = "Juan Juan",
                            RUC = "20428729201",
                            Telefono = "716245202"
                        },
                        new
                        {
                            ClienteId = new Guid("83a25cf5-7f60-4a89-bb78-70ebd411faaa"),
                            DNI = "77626681",
                            Direccion = "Calle C, 92, Trujillo",
                            Email = "comprador221@gmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5612),
                            Nombres = "María Diego",
                            RUC = "20428729201",
                            Telefono = "629682586"
                        },
                        new
                        {
                            ClienteId = new Guid("251a0e18-1b64-49af-b2e2-4f5c219ea2a3"),
                            DNI = "91179238",
                            Direccion = "Calle B, 61, Lima",
                            Email = "cliente245@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5648),
                            Nombres = "María Juan",
                            RUC = "20428729201",
                            Telefono = "199766094"
                        },
                        new
                        {
                            ClienteId = new Guid("47c0181f-6e0b-4133-881a-a6f31552d11c"),
                            DNI = "71375110",
                            Direccion = "Calle E, 56, Lima",
                            Email = "cliente477@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5655),
                            Nombres = "Sofía Ana",
                            RUC = "20428729201",
                            Telefono = "686988363"
                        },
                        new
                        {
                            ClienteId = new Guid("6949bd44-dcd0-4868-8797-6738ce5a8aef"),
                            DNI = "67859551",
                            Direccion = "Calle E, 63, Cusco",
                            Email = "usuario471@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5664),
                            Nombres = "Laura Carlos",
                            RUC = "20428729201",
                            Telefono = "924375810"
                        },
                        new
                        {
                            ClienteId = new Guid("0c73f76f-0c29-4d18-8a7e-218473ac4209"),
                            DNI = "82895064",
                            Direccion = "Calle B, 82, Piura",
                            Email = "comprador192@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5671),
                            Nombres = "Diego Sofía",
                            RUC = "20428729201",
                            Telefono = "585828330"
                        },
                        new
                        {
                            ClienteId = new Guid("2f23674e-0f64-47a2-893d-e7cb233427fb"),
                            DNI = "28698796",
                            Direccion = "Calle E, 75, Cusco",
                            Email = "contacto201@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5678),
                            Nombres = "Sofía Lucía",
                            RUC = "20428729201",
                            Telefono = "395733856"
                        },
                        new
                        {
                            ClienteId = new Guid("c281b853-1920-4150-b51d-225e1b0e17e6"),
                            DNI = "44364498",
                            Direccion = "Calle C, 74, Lima",
                            Email = "contacto554@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5684),
                            Nombres = "María Luis",
                            RUC = "20428729201",
                            Telefono = "748908798"
                        },
                        new
                        {
                            ClienteId = new Guid("53d37697-05f9-4a07-aa2b-de8b2e4adc8a"),
                            DNI = "95545898",
                            Direccion = "Calle E, 61, Cusco",
                            Email = "contacto373@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5691),
                            Nombres = "Juan Lucía",
                            RUC = "20428729201",
                            Telefono = "384662504"
                        },
                        new
                        {
                            ClienteId = new Guid("d8b183a0-9cf0-4c0c-8432-d606eaeeccb9"),
                            DNI = "89067623",
                            Direccion = "Calle B, 12, Cusco",
                            Email = "contacto21@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5697),
                            Nombres = "Juan María",
                            RUC = "20428729201",
                            Telefono = "204351475"
                        },
                        new
                        {
                            ClienteId = new Guid("326298d7-2306-429d-8a00-bcd138ba01fd"),
                            DNI = "85408612",
                            Direccion = "Calle D, 68, Cusco",
                            Email = "comprador295@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5704),
                            Nombres = "Ana Laura",
                            RUC = "20428729201",
                            Telefono = "659675344"
                        },
                        new
                        {
                            ClienteId = new Guid("899f92f3-c569-497b-9a07-ce5b043df558"),
                            DNI = "19768757",
                            Direccion = "Calle C, 65, Trujillo",
                            Email = "comprador504@hotmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5710),
                            Nombres = "Juan Laura",
                            RUC = "20428729201",
                            Telefono = "256264319"
                        },
                        new
                        {
                            ClienteId = new Guid("04eacc27-39ad-41c9-8b6e-457000f6e661"),
                            DNI = "36240549",
                            Direccion = "Calle E, 98, Lima",
                            Email = "comprador381@hotmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5719),
                            Nombres = "Pedro Pedro",
                            RUC = "20428729201",
                            Telefono = "276900746"
                        },
                        new
                        {
                            ClienteId = new Guid("3f67f3c8-be73-4e70-a15a-0f0d989b6daa"),
                            DNI = "92834102",
                            Direccion = "Calle D, 81, Trujillo",
                            Email = "comprador48@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5750),
                            Nombres = "María Lucía",
                            RUC = "20428729201",
                            Telefono = "226958895"
                        },
                        new
                        {
                            ClienteId = new Guid("34bf30d2-3b1b-4236-93aa-8a7f43523bbf"),
                            DNI = "62754907",
                            Direccion = "Calle C, 87, Lima",
                            Email = "cliente524@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5757),
                            Nombres = "Diego Lucía",
                            RUC = "20428729201",
                            Telefono = "576227467"
                        },
                        new
                        {
                            ClienteId = new Guid("b5a4cd48-cef0-4542-954a-ce84c6ce2bb6"),
                            DNI = "32898000",
                            Direccion = "Calle E, 9, Arequipa",
                            Email = "contacto496@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5764),
                            Nombres = "Diego Juan",
                            RUC = "20428729201",
                            Telefono = "403006184"
                        },
                        new
                        {
                            ClienteId = new Guid("6d34b708-2464-4f47-a7a0-749ce977d251"),
                            DNI = "69768177",
                            Direccion = "Calle B, 63, Trujillo",
                            Email = "correo518@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5770),
                            Nombres = "Luis Luis",
                            RUC = "20428729201",
                            Telefono = "463655339"
                        },
                        new
                        {
                            ClienteId = new Guid("7fbf2af5-4fa4-4971-8039-d27a5c998140"),
                            DNI = "69554673",
                            Direccion = "Calle B, 50, Cusco",
                            Email = "comprador309@hotmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5777),
                            Nombres = "Ana Luis",
                            RUC = "20428729201",
                            Telefono = "826521602"
                        },
                        new
                        {
                            ClienteId = new Guid("6c91801c-ea26-45cd-8b08-592dd9ba4c20"),
                            DNI = "76840088",
                            Direccion = "Calle A, 76, Lima",
                            Email = "correo521@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5783),
                            Nombres = "Lucía Ana",
                            RUC = "20428729201",
                            Telefono = "872079958"
                        },
                        new
                        {
                            ClienteId = new Guid("bf469706-301e-4e74-9996-3ee8dd44c4cf"),
                            DNI = "39572818",
                            Direccion = "Calle E, 46, Cusco",
                            Email = "cliente583@gmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5789),
                            Nombres = "Carlos Sofía",
                            RUC = "20428729201",
                            Telefono = "706581209"
                        },
                        new
                        {
                            ClienteId = new Guid("a53ecaf3-44f1-4b63-9592-b438ebac2f3e"),
                            DNI = "26749173",
                            Direccion = "Calle A, 55, Arequipa",
                            Email = "contacto490@gmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5798),
                            Nombres = "Luis Sofía",
                            RUC = "20428729201",
                            Telefono = "707669779"
                        },
                        new
                        {
                            ClienteId = new Guid("02b4df43-2bb8-4104-a627-3fb52e87e70b"),
                            DNI = "57613926",
                            Direccion = "Calle D, 52, Piura",
                            Email = "usuario848@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5804),
                            Nombres = "Lucía Pedro",
                            RUC = "20428729201",
                            Telefono = "665797752"
                        },
                        new
                        {
                            ClienteId = new Guid("3dae94bd-d46d-45a7-be16-46d4c3e85a68"),
                            DNI = "44023696",
                            Direccion = "Calle C, 5, Arequipa",
                            Email = "usuario459@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5811),
                            Nombres = "Carlos Ana",
                            RUC = "20428729201",
                            Telefono = "757073609"
                        },
                        new
                        {
                            ClienteId = new Guid("8c227e71-dcbc-43da-b68e-8b3b05f12beb"),
                            DNI = "25733633",
                            Direccion = "Calle C, 61, Trujillo",
                            Email = "cliente464@hotmail.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5818),
                            Nombres = "Lucía Juan",
                            RUC = "20428729201",
                            Telefono = "258484895"
                        },
                        new
                        {
                            ClienteId = new Guid("a3a16956-ab86-468a-acc1-4968a641a114"),
                            DNI = "20954878",
                            Direccion = "Calle E, 74, Lima",
                            Email = "comprador524@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5875),
                            Nombres = "Luis Luis",
                            RUC = "20428729201",
                            Telefono = "317620155"
                        },
                        new
                        {
                            ClienteId = new Guid("282bdc0b-bfe4-4dff-9407-c749e0a32a83"),
                            DNI = "91204294",
                            Direccion = "Calle D, 69, Lima",
                            Email = "cliente614@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5883),
                            Nombres = "Pedro Ana",
                            RUC = "20428729201",
                            Telefono = "987959466"
                        },
                        new
                        {
                            ClienteId = new Guid("179b8a6c-5de3-4f71-93c9-e36d3c05240d"),
                            DNI = "52199599",
                            Direccion = "Calle D, 50, Trujillo",
                            Email = "comprador620@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5889),
                            Nombres = "Sofía Laura",
                            RUC = "20428729201",
                            Telefono = "374422351"
                        },
                        new
                        {
                            ClienteId = new Guid("9095b3be-bf48-4734-aada-08c95dbacf62"),
                            DNI = "32161809",
                            Direccion = "Calle A, 92, Cusco",
                            Email = "comprador908@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5896),
                            Nombres = "Sofía Carlos",
                            RUC = "20428729201",
                            Telefono = "264227608"
                        },
                        new
                        {
                            ClienteId = new Guid("0490a791-100e-47e2-90c9-1191514cc7d3"),
                            DNI = "72967426",
                            Direccion = "Calle A, 15, Arequipa",
                            Email = "usuario539@yahoo.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5905),
                            Nombres = "Sofía María",
                            RUC = "20428729201",
                            Telefono = "943234892"
                        },
                        new
                        {
                            ClienteId = new Guid("942d1060-b603-4c96-937a-f5cdcca09422"),
                            DNI = "19622813",
                            Direccion = "Calle B, 99, Piura",
                            Email = "comprador930@outlook.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5911),
                            Nombres = "Diego Pedro",
                            RUC = "20428729201",
                            Telefono = "612536189"
                        },
                        new
                        {
                            ClienteId = new Guid("04615b61-05b1-4aa7-b111-afcf51a7119f"),
                            DNI = "78217464",
                            Direccion = "Calle E, 1, Lima",
                            Email = "cliente766@example.com",
                            Fecharegistro = new DateTime(2024, 6, 3, 4, 48, 34, 640, DateTimeKind.Utc).AddTicks(5918),
                            Nombres = "Lucía Juan",
                            RUC = "20428729201",
                            Telefono = "292230750"
                        });
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.Property<Guid>("CompraPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MetodoPagoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("MontoPago")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("CompraPagoId");

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("CompraPago");
                });

            modelBuilder.Entity("Dominio.entities.DatosEscaneo", b =>
                {
                    b.Property<Guid>("DatosEscaneoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnteriorStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NuevoStock")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DatosEscaneoId");

                    b.ToTable("DatosEscaneo");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.Property<Guid>("DetalleInventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StockAnterior")
                        .HasColumnType("int");

                    b.Property<int?>("StockIngreso")
                        .HasColumnType("int");

                    b.Property<int?>("StockTotal")
                        .HasColumnType("int");

                    b.HasKey("DetalleInventarioId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleInventario");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Property<Guid>("DetallePedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DetallePedidoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.Property<Guid>("DevolucionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DetallePedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.HasKey("DevolucionId");

                    b.HasIndex("DetallePedidoId");

                    b.ToTable("Devolucion");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Property<Guid>("InventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CantidadProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Inventario");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.Property<Guid>("InventarioProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fechaentrega")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioProductoId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("InventarioProducto");
                });

            modelBuilder.Entity("Dominio.entities.MetodoPago", b =>
                {
                    b.Property<Guid>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoMetodo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodoPago");

                    b.HasData(
                        new
                        {
                            MetodoPagoId = new Guid("2e6054e2-0bd5-40b6-9b34-d00ea32b2238"),
                            TipoMetodo = "efectivo"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("03f6aca8-0b76-4d58-93ff-e0ffab433736"),
                            TipoMetodo = "Visa"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("a68cea38-f847-4d1c-b765-bf5592fdd467"),
                            TipoMetodo = "MasterCard"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("9e1e5daf-28d2-4ce7-b90d-80c1e8f3dabc"),
                            TipoMetodo = "American Express"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("4b6883ec-bf81-43eb-9d4f-b91ce2d0fc10"),
                            TipoMetodo = "PayPal"
                        });
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Property<Guid>("PrecioWebId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioWebId");

                    b.ToTable("PrecioWeb");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.Property<Guid>("PrecioWebProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnteriorPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NuevoPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PrecioWebId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrecioWebProductoId");

                    b.HasIndex("PrecioWebId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PrecioWebProducto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Property<Guid>("ProductoProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Preciocompra")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Preciounitario")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ProductoProveedorId");

                    b.ToTable("ProductoProveedor");

                    b.HasData(
                        new
                        {
                            ProductoProveedorId = new Guid("556adf7d-4f04-462a-adf0-b29ff85b2de8"),
                            Preciocompra = 980.55m,
                            Preciounitario = 130.25m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("0dca7743-361c-4cbf-9863-0a77717c0990"),
                            Preciocompra = 922.23m,
                            Preciounitario = 344.70m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("89b66a0f-75c0-4ca4-aa84-ee1b053883dd"),
                            Preciocompra = 613.38m,
                            Preciounitario = 437.64m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ddbeac85-647d-4c10-a0b5-46bef75c8f97"),
                            Preciocompra = 785.89m,
                            Preciounitario = 532.82m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("520091ad-cc78-451b-9db1-2b8da38f1458"),
                            Preciocompra = 68.76m,
                            Preciounitario = 961.37m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("b3c3c2b5-203f-43e7-82bc-f079f03ac44c"),
                            Preciocompra = 1.72m,
                            Preciounitario = 703.59m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("aa15101a-c1d1-4203-aff4-3f4221a0a1ec"),
                            Preciocompra = 501.04m,
                            Preciounitario = 486.52m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("141d47e1-9207-4040-9f8f-85c0fbb2d9e6"),
                            Preciocompra = 398.77m,
                            Preciounitario = 42.77m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("4ec67425-aa27-499b-bf90-37eba0f9cca1"),
                            Preciocompra = 687.40m,
                            Preciounitario = 66.79m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ea8629b5-1cec-4397-9617-9279098bb153"),
                            Preciocompra = 225.54m,
                            Preciounitario = 487.81m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("5ec8a7ba-8b88-4140-8439-57502b8ad8a3"),
                            Preciocompra = 107.07m,
                            Preciounitario = 122.67m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("91fa5b14-059a-4d34-ae92-a070a24b3b0a"),
                            Preciocompra = 858.56m,
                            Preciounitario = 45.09m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ab4fb55a-ce51-40bf-95f1-c7335fe87c13"),
                            Preciocompra = 655.96m,
                            Preciounitario = 434.49m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("30f2f5a3-c6bf-414e-9f5c-54b5638cd3ce"),
                            Preciocompra = 967.21m,
                            Preciounitario = 958.55m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("7951ddc3-8235-400d-81a3-3d5775a9fb40"),
                            Preciocompra = 615.31m,
                            Preciounitario = 836.80m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("75cc3b2e-2fec-4d66-8819-baeae06808ed"),
                            Preciocompra = 387.88m,
                            Preciounitario = 615.75m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("6253f395-ee15-4c50-8764-d2b447f064c4"),
                            Preciocompra = 955.66m,
                            Preciounitario = 264.02m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("73e9bdda-c8c8-4060-a7a5-9324fde3b9cc"),
                            Preciocompra = 382.93m,
                            Preciounitario = 654.44m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("f646ff11-1789-44b7-ac2b-8f60f78af63b"),
                            Preciocompra = 257.50m,
                            Preciounitario = 329.72m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("34a8ce98-0f6c-4b8f-a991-cd8a85493463"),
                            Preciocompra = 124.38m,
                            Preciounitario = 347.85m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("372c38c7-9046-4354-83f0-0c557ec17031"),
                            Preciocompra = 425.98m,
                            Preciounitario = 730.94m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("96c2534c-202e-4f60-b1fc-4f4f1a12367d"),
                            Preciocompra = 174.19m,
                            Preciounitario = 307.45m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("5f3760a0-1564-45ec-914e-ebf0f33729ad"),
                            Preciocompra = 346.23m,
                            Preciounitario = 367.62m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("642f52bc-4baf-4593-92b5-ee3dbeabbf55"),
                            Preciocompra = 940.43m,
                            Preciounitario = 814.60m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("efda06fc-4044-4bb6-95ab-1c550ae84cbf"),
                            Preciocompra = 349.03m,
                            Preciounitario = 462.95m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("32340c46-290f-4a52-adfe-c1f902bd148c"),
                            Preciocompra = 996.91m,
                            Preciounitario = 417.41m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("94c8f18d-9815-43c6-9af7-793dd07f3054"),
                            Preciocompra = 553.17m,
                            Preciounitario = 413.93m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("386bbba1-866e-40ff-8908-f77f88a51e09"),
                            Preciocompra = 605.18m,
                            Preciounitario = 763.18m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("94b24a98-3ada-4d18-ae04-a5188e18cb25"),
                            Preciocompra = 717.04m,
                            Preciounitario = 267.60m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("024bb457-7af1-4a53-9c50-1ef1ea3529d3"),
                            Preciocompra = 111.04m,
                            Preciounitario = 547.65m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("7918e625-9510-4985-a983-f028d6d65ec3"),
                            Preciocompra = 607.17m,
                            Preciounitario = 568.08m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("8455a439-d9e0-4b99-a7f3-10cb5d5148d4"),
                            Preciocompra = 324.92m,
                            Preciounitario = 774.75m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("d825eed0-b045-4424-916a-54a28373fee6"),
                            Preciocompra = 123.82m,
                            Preciounitario = 540.73m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("711c711d-f31b-4920-87bb-d739d796bbce"),
                            Preciocompra = 717.00m,
                            Preciounitario = 432.89m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ccb0613d-95cb-4c7a-b6fa-44be740bdc53"),
                            Preciocompra = 105.54m,
                            Preciounitario = 764.30m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("83f97613-cdea-4d56-8fcf-49ffa107dca4"),
                            Preciocompra = 825.97m,
                            Preciounitario = 949.99m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("856c3d2d-41d5-4f4d-8317-f8b96b258dbe"),
                            Preciocompra = 456.15m,
                            Preciounitario = 91.87m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("73bb254f-4ecc-41c0-89b0-ed7fdb96dc4b"),
                            Preciocompra = 495.50m,
                            Preciounitario = 7.56m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("1aed321e-30d3-4a0b-8d1c-795246bc87a4"),
                            Preciocompra = 554.32m,
                            Preciounitario = 328.81m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("07553da9-babf-48d7-b84d-9e8602a27f8b"),
                            Preciocompra = 791.54m,
                            Preciounitario = 917.45m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("5d78105e-7d98-4bee-9f76-c2cf20c95197"),
                            Preciocompra = 23.13m,
                            Preciounitario = 144.73m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("cac06979-4069-4be1-ae10-ae897d553f36"),
                            Preciocompra = 274.44m,
                            Preciounitario = 501.33m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("375e0007-75ba-4e00-9ec4-03612f499d27"),
                            Preciocompra = 598.51m,
                            Preciounitario = 478.51m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("44eddea2-517e-4ebe-a1fe-3c8f2e349062"),
                            Preciocompra = 440.49m,
                            Preciounitario = 941.00m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("664215bf-c65d-4b27-96b0-ebd263893d2a"),
                            Preciocompra = 588.19m,
                            Preciounitario = 849.11m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("8acc635c-012a-444e-9de3-4fe45159b214"),
                            Preciocompra = 973.71m,
                            Preciounitario = 659.58m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c0e4f0ff-f17f-469a-b436-c70061d322e7"),
                            Preciocompra = 883.41m,
                            Preciounitario = 739.25m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("5967022e-b982-47d2-9bdd-0567f460c42d"),
                            Preciocompra = 305.17m,
                            Preciounitario = 196.03m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("375527b6-f607-4377-a391-9fd6bd7f5aff"),
                            Preciocompra = 16.04m,
                            Preciounitario = 506.03m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("8a6266a7-ea93-40ad-b6f8-0ca7cd07f9ae"),
                            Preciocompra = 623.34m,
                            Preciounitario = 253.62m
                        });
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Property<Guid>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Property<Guid>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.HasOne("Dominio.entities.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId");

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Inventario");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Dominio.entities.Venta", "Venta")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.HasOne("Dominio.entities.DetallePedido", "DetallePedido")
                        .WithMany("Devolucionlista")
                        .HasForeignKey("DetallePedidoId");

                    b.Navigation("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.HasOne("Dominio.entities.Proveedor", "Proveedor")
                        .WithMany("Inventariolista")
                        .HasForeignKey("ProveedorId");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("InventarioProductolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("InventarioProducto")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("Inventario");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.HasOne("Dominio.entities.PrecioWeb", "PrecioWeb")
                        .WithMany("PrecioWeblista")
                        .HasForeignKey("PrecioWebId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("PrecioWebProductolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("PrecioWeb");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.HasOne("Dominio.entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("Proveedorlista")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.HasOne("Dominio.entities.Cliente", "Cliente")
                        .WithMany("Ventalista")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Navigation("Ventalista");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Navigation("Devolucionlista");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("InventarioProductolista");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Navigation("PrecioWeblista");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("DetallePedidolista");

                    b.Navigation("PrecioWebProductolista");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Navigation("InventarioProducto");

                    b.Navigation("Proveedorlista");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Navigation("Inventariolista");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Navigation("DetallePedidolista");
                });
#pragma warning restore 612, 618
        }
    }
}
