// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(AlmacenOnlineContext))]
    partial class AlmacenOnlineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.entities.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            CategoriaId = new Guid("47fec3e6-fa34-4a0e-82cd-5a5d9638025b"),
                            NombreCategoria = "Placa madre"
                        },
                        new
                        {
                            CategoriaId = new Guid("b7019621-86a2-4b60-9a6d-323e9e0bd44a"),
                            NombreCategoria = "Tarjeta gráfica"
                        },
                        new
                        {
                            CategoriaId = new Guid("03f545e4-5152-4b0a-a5d5-8f4e72010688"),
                            NombreCategoria = "Fuente de alimentación"
                        },
                        new
                        {
                            CategoriaId = new Guid("1253758b-bd00-4e7c-9bde-e76f3aaf1fc3"),
                            NombreCategoria = "Memoria RAM"
                        },
                        new
                        {
                            CategoriaId = new Guid("dd1f37a6-fe39-4536-ac2f-6eeeb446cf6f"),
                            NombreCategoria = "Disco duro SSD"
                        },
                        new
                        {
                            CategoriaId = new Guid("e9f4a89a-fc11-415a-b9d5-cb43a064d14d"),
                            NombreCategoria = "Procesador"
                        });
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            ClienteId = new Guid("e95725be-fb71-498f-9d9f-ddf7948d771d"),
                            DNI = "75517717",
                            Direccion = "Calle B, 78, Lima",
                            Email = "correo954@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2608),
                            Nombres = "María Lucía",
                            RUC = "20428729201",
                            Telefono = "575740018"
                        },
                        new
                        {
                            ClienteId = new Guid("45423f43-43e5-453e-b4fd-6e80d8654bc7"),
                            DNI = "67972584",
                            Direccion = "Calle A, 25, Piura",
                            Email = "correo318@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2621),
                            Nombres = "Ana Pedro",
                            RUC = "20428729201",
                            Telefono = "823905666"
                        },
                        new
                        {
                            ClienteId = new Guid("01b6b5cf-e32e-4275-82e8-f91d5a96f6fc"),
                            DNI = "77680962",
                            Direccion = "Calle E, 70, Lima",
                            Email = "usuario348@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2665),
                            Nombres = "Carlos Ana",
                            RUC = "20428729201",
                            Telefono = "566347286"
                        },
                        new
                        {
                            ClienteId = new Guid("e773edc4-e565-4409-bcb9-bc85168d80ec"),
                            DNI = "65541326",
                            Direccion = "Calle E, 17, Cusco",
                            Email = "usuario829@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2676),
                            Nombres = "Sofía Luis",
                            RUC = "20428729201",
                            Telefono = "430387712"
                        },
                        new
                        {
                            ClienteId = new Guid("876c8bdc-398e-4e0b-ab47-dd3084e780f0"),
                            DNI = "46571894",
                            Direccion = "Calle A, 11, Lima",
                            Email = "comprador399@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2686),
                            Nombres = "Luis Ana",
                            RUC = "20428729201",
                            Telefono = "161835804"
                        },
                        new
                        {
                            ClienteId = new Guid("0344b0fc-7001-44ca-a08c-60cd083bff89"),
                            DNI = "89572608",
                            Direccion = "Calle E, 57, Arequipa",
                            Email = "comprador278@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2697),
                            Nombres = "Diego María",
                            RUC = "20428729201",
                            Telefono = "269026968"
                        },
                        new
                        {
                            ClienteId = new Guid("1803e182-2cb7-4e82-9948-8315900b3698"),
                            DNI = "27319376",
                            Direccion = "Calle C, 77, Arequipa",
                            Email = "usuario976@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2704),
                            Nombres = "Juan María",
                            RUC = "20428729201",
                            Telefono = "394389531"
                        },
                        new
                        {
                            ClienteId = new Guid("655fff76-84cc-4113-883c-3e4ce7fa7735"),
                            DNI = "35323295",
                            Direccion = "Calle B, 92, Piura",
                            Email = "comprador516@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2711),
                            Nombres = "Laura Sofía",
                            RUC = "20428729201",
                            Telefono = "964796459"
                        },
                        new
                        {
                            ClienteId = new Guid("e898429f-db9d-4761-a069-52c8d804f1bb"),
                            DNI = "88071788",
                            Direccion = "Calle D, 39, Arequipa",
                            Email = "contacto596@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2719),
                            Nombres = "Luis Pedro",
                            RUC = "20428729201",
                            Telefono = "577374377"
                        },
                        new
                        {
                            ClienteId = new Guid("82ac6336-04d1-4a2d-a069-bf1e8e7c4642"),
                            DNI = "50590385",
                            Direccion = "Calle C, 47, Piura",
                            Email = "cliente986@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2726),
                            Nombres = "Lucía Lucía",
                            RUC = "20428729201",
                            Telefono = "253261453"
                        },
                        new
                        {
                            ClienteId = new Guid("d3026257-ff9f-416c-9888-534cbbde0bcf"),
                            DNI = "15649049",
                            Direccion = "Calle A, 22, Piura",
                            Email = "usuario956@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2734),
                            Nombres = "Ana María",
                            RUC = "20428729201",
                            Telefono = "390000322"
                        },
                        new
                        {
                            ClienteId = new Guid("2c1981cb-201b-4c50-9b12-c07fc70d1b87"),
                            DNI = "77650483",
                            Direccion = "Calle E, 18, Piura",
                            Email = "usuario412@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2741),
                            Nombres = "Juan Pedro",
                            RUC = "20428729201",
                            Telefono = "560012280"
                        },
                        new
                        {
                            ClienteId = new Guid("80a38d6b-edd9-43db-be65-9916ff225d6c"),
                            DNI = "47173852",
                            Direccion = "Calle E, 23, Cusco",
                            Email = "correo53@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2748),
                            Nombres = "Laura Diego",
                            RUC = "20428729201",
                            Telefono = "391049853"
                        },
                        new
                        {
                            ClienteId = new Guid("5ea760be-0dd7-4354-9006-72ed75c6d452"),
                            DNI = "26599162",
                            Direccion = "Calle E, 62, Cusco",
                            Email = "correo607@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2781),
                            Nombres = "Luis Laura",
                            RUC = "20428729201",
                            Telefono = "143731125"
                        },
                        new
                        {
                            ClienteId = new Guid("68e95248-e21f-4a8e-b46b-a5f1ab6eccfc"),
                            DNI = "12413904",
                            Direccion = "Calle A, 70, Arequipa",
                            Email = "correo83@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2789),
                            Nombres = "Pedro Ana",
                            RUC = "20428729201",
                            Telefono = "526156476"
                        },
                        new
                        {
                            ClienteId = new Guid("aa89a168-eb8f-4c55-94f0-c9f847457a00"),
                            DNI = "54267770",
                            Direccion = "Calle A, 83, Arequipa",
                            Email = "usuario726@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2796),
                            Nombres = "Carlos Pedro",
                            RUC = "20428729201",
                            Telefono = "871068574"
                        },
                        new
                        {
                            ClienteId = new Guid("6faa4622-ae0a-4ca2-ac38-c8f8ab540ae9"),
                            DNI = "38686047",
                            Direccion = "Calle E, 78, Trujillo",
                            Email = "cliente67@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2804),
                            Nombres = "Juan Carlos",
                            RUC = "20428729201",
                            Telefono = "505598613"
                        },
                        new
                        {
                            ClienteId = new Guid("533c624a-6993-4bd0-a8b9-9a16d82338a0"),
                            DNI = "61948335",
                            Direccion = "Calle A, 48, Cusco",
                            Email = "usuario794@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2810),
                            Nombres = "Juan Lucía",
                            RUC = "20428729201",
                            Telefono = "646946924"
                        },
                        new
                        {
                            ClienteId = new Guid("347f7224-95a2-48ef-b7e1-7386fb138be1"),
                            DNI = "86586260",
                            Direccion = "Calle B, 56, Arequipa",
                            Email = "comprador293@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2817),
                            Nombres = "Juan Diego",
                            RUC = "20428729201",
                            Telefono = "836268823"
                        },
                        new
                        {
                            ClienteId = new Guid("623750fd-c7eb-4fb5-adf5-7da9c506e7c4"),
                            DNI = "54468683",
                            Direccion = "Calle C, 34, Trujillo",
                            Email = "comprador604@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2824),
                            Nombres = "Ana Ana",
                            RUC = "20428729201",
                            Telefono = "310259821"
                        },
                        new
                        {
                            ClienteId = new Guid("646a524e-0023-4d72-8781-43eb7c29e2dc"),
                            DNI = "26624074",
                            Direccion = "Calle C, 20, Lima",
                            Email = "usuario137@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2831),
                            Nombres = "Diego María",
                            RUC = "20428729201",
                            Telefono = "702226094"
                        },
                        new
                        {
                            ClienteId = new Guid("3a968750-c735-444b-826c-8f0b5f9f323c"),
                            DNI = "52014821",
                            Direccion = "Calle C, 53, Lima",
                            Email = "correo165@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2840),
                            Nombres = "Carlos Ana",
                            RUC = "20428729201",
                            Telefono = "379689440"
                        },
                        new
                        {
                            ClienteId = new Guid("e7e16985-c52b-4018-b2a9-8c3a3f810856"),
                            DNI = "47997607",
                            Direccion = "Calle B, 98, Cusco",
                            Email = "contacto460@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2848),
                            Nombres = "María Laura",
                            RUC = "20428729201",
                            Telefono = "326971860"
                        },
                        new
                        {
                            ClienteId = new Guid("6d33f3be-5b27-4fc2-8a33-a5f925cd9fcc"),
                            DNI = "52717412",
                            Direccion = "Calle B, 4, Piura",
                            Email = "usuario460@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2855),
                            Nombres = "Luis Laura",
                            RUC = "20428729201",
                            Telefono = "647289987"
                        },
                        new
                        {
                            ClienteId = new Guid("1a7a3b4c-3e50-448a-82c3-3417f899d37c"),
                            DNI = "93368588",
                            Direccion = "Calle C, 41, Cusco",
                            Email = "correo804@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2862),
                            Nombres = "Juan Pedro",
                            RUC = "20428729201",
                            Telefono = "888693657"
                        },
                        new
                        {
                            ClienteId = new Guid("a5f5e195-a91b-489a-b29b-6b831cc58e00"),
                            DNI = "76170625",
                            Direccion = "Calle A, 17, Piura",
                            Email = "comprador533@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2893),
                            Nombres = "Juan María",
                            RUC = "20428729201",
                            Telefono = "506684380"
                        },
                        new
                        {
                            ClienteId = new Guid("69dd9783-ef39-4bae-862e-8734ed8c4985"),
                            DNI = "70542805",
                            Direccion = "Calle C, 64, Cusco",
                            Email = "usuario618@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2900),
                            Nombres = "Luis Juan",
                            RUC = "20428729201",
                            Telefono = "369163434"
                        },
                        new
                        {
                            ClienteId = new Guid("d27cb8b2-8202-46ee-bab1-4d8de2951182"),
                            DNI = "20164710",
                            Direccion = "Calle B, 24, Lima",
                            Email = "contacto158@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2907),
                            Nombres = "Luis Lucía",
                            RUC = "20428729201",
                            Telefono = "208395337"
                        },
                        new
                        {
                            ClienteId = new Guid("a1dc9e8c-f1d5-4724-886b-9724797b5d71"),
                            DNI = "67097055",
                            Direccion = "Calle A, 9, Lima",
                            Email = "cliente666@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2913),
                            Nombres = "Lucía Juan",
                            RUC = "20428729201",
                            Telefono = "621552248"
                        },
                        new
                        {
                            ClienteId = new Guid("e6af45ff-4274-4e5a-937c-90407d8a358e"),
                            DNI = "80184797",
                            Direccion = "Calle A, 68, Piura",
                            Email = "usuario991@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2923),
                            Nombres = "Luis Laura",
                            RUC = "20428729201",
                            Telefono = "302134054"
                        },
                        new
                        {
                            ClienteId = new Guid("825a7830-c14d-47ba-b87d-faa05abdc8dd"),
                            DNI = "45187632",
                            Direccion = "Calle A, 41, Arequipa",
                            Email = "cliente765@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2929),
                            Nombres = "Pedro Carlos",
                            RUC = "20428729201",
                            Telefono = "914957220"
                        },
                        new
                        {
                            ClienteId = new Guid("04e9777a-e3cf-4302-94d4-3ab7a6813daf"),
                            DNI = "91932812",
                            Direccion = "Calle D, 78, Trujillo",
                            Email = "usuario63@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2937),
                            Nombres = "Luis Sofía",
                            RUC = "20428729201",
                            Telefono = "609062364"
                        },
                        new
                        {
                            ClienteId = new Guid("be398d79-d55a-464c-92bb-5a2722bdef42"),
                            DNI = "92721956",
                            Direccion = "Calle B, 72, Trujillo",
                            Email = "correo472@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2943),
                            Nombres = "Juan Lucía",
                            RUC = "20428729201",
                            Telefono = "604149603"
                        },
                        new
                        {
                            ClienteId = new Guid("4b85ad42-16dd-4929-8538-04a9d9a9c639"),
                            DNI = "23400427",
                            Direccion = "Calle A, 57, Lima",
                            Email = "correo786@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2950),
                            Nombres = "Diego Pedro",
                            RUC = "20428729201",
                            Telefono = "635893535"
                        },
                        new
                        {
                            ClienteId = new Guid("ad075ca5-4b11-47b5-afa3-2e53ba329b55"),
                            DNI = "55512036",
                            Direccion = "Calle C, 77, Lima",
                            Email = "comprador703@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2957),
                            Nombres = "Luis Luis",
                            RUC = "20428729201",
                            Telefono = "407981485"
                        },
                        new
                        {
                            ClienteId = new Guid("2c8a7002-1c08-471f-9ac5-9a489b2a5bb0"),
                            DNI = "32474700",
                            Direccion = "Calle E, 38, Trujillo",
                            Email = "usuario9@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(2964),
                            Nombres = "Ana Lucía",
                            RUC = "20428729201",
                            Telefono = "142136800"
                        },
                        new
                        {
                            ClienteId = new Guid("29864b5a-4095-4679-ac0a-9579cd859bd2"),
                            DNI = "70288412",
                            Direccion = "Calle B, 59, Lima",
                            Email = "contacto103@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3001),
                            Nombres = "Sofía Sofía",
                            RUC = "20428729201",
                            Telefono = "801274722"
                        },
                        new
                        {
                            ClienteId = new Guid("d9422309-a6ff-4999-b916-2109e4a5cfc1"),
                            DNI = "50087402",
                            Direccion = "Calle A, 96, Lima",
                            Email = "comprador301@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3011),
                            Nombres = "Diego Pedro",
                            RUC = "20428729201",
                            Telefono = "100958912"
                        },
                        new
                        {
                            ClienteId = new Guid("fb426b74-9fb8-4de2-a8df-174a514de1a6"),
                            DNI = "96742254",
                            Direccion = "Calle B, 96, Trujillo",
                            Email = "usuario499@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3018),
                            Nombres = "Luis Sofía",
                            RUC = "20428729201",
                            Telefono = "265737609"
                        },
                        new
                        {
                            ClienteId = new Guid("8322ab5d-11e4-44a9-af94-5499c9e42dd6"),
                            DNI = "95005763",
                            Direccion = "Calle B, 95, Arequipa",
                            Email = "cliente223@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3025),
                            Nombres = "Laura Juan",
                            RUC = "20428729201",
                            Telefono = "935339160"
                        },
                        new
                        {
                            ClienteId = new Guid("9da88606-3eff-49de-833f-32f26ac4d6a1"),
                            DNI = "87762361",
                            Direccion = "Calle B, 25, Cusco",
                            Email = "correo888@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3031),
                            Nombres = "Laura Luis",
                            RUC = "20428729201",
                            Telefono = "120659264"
                        },
                        new
                        {
                            ClienteId = new Guid("9fb1ad17-6348-443b-a23b-a9f2059ba0e5"),
                            DNI = "30266638",
                            Direccion = "Calle A, 85, Lima",
                            Email = "contacto602@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3038),
                            Nombres = "Diego Diego",
                            RUC = "20428729201",
                            Telefono = "100032901"
                        },
                        new
                        {
                            ClienteId = new Guid("801540d3-0ce7-484a-9ff7-43a9d6551dbe"),
                            DNI = "45413170",
                            Direccion = "Calle A, 31, Piura",
                            Email = "contacto998@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3045),
                            Nombres = "Laura Laura",
                            RUC = "20428729201",
                            Telefono = "968527246"
                        },
                        new
                        {
                            ClienteId = new Guid("72b2fc65-9719-4413-8b95-3f1fa6625fe8"),
                            DNI = "30792270",
                            Direccion = "Calle E, 45, Arequipa",
                            Email = "contacto908@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3052),
                            Nombres = "Sofía Laura",
                            RUC = "20428729201",
                            Telefono = "707974597"
                        },
                        new
                        {
                            ClienteId = new Guid("6c6b5062-664d-4061-9901-1466d440429d"),
                            DNI = "12661397",
                            Direccion = "Calle E, 51, Arequipa",
                            Email = "contacto590@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3059),
                            Nombres = "Pedro Ana",
                            RUC = "20428729201",
                            Telefono = "716343340"
                        },
                        new
                        {
                            ClienteId = new Guid("d9dab566-d7b4-48a7-8ebe-26bdd3a31044"),
                            DNI = "37113588",
                            Direccion = "Calle D, 61, Lima",
                            Email = "comprador68@example.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3068),
                            Nombres = "Luis Juan",
                            RUC = "20428729201",
                            Telefono = "858797063"
                        },
                        new
                        {
                            ClienteId = new Guid("305cff0c-7a1a-4670-8254-96adc51c06dd"),
                            DNI = "57489385",
                            Direccion = "Calle B, 8, Piura",
                            Email = "contacto837@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3075),
                            Nombres = "Carlos Lucía",
                            RUC = "20428729201",
                            Telefono = "336366847"
                        },
                        new
                        {
                            ClienteId = new Guid("7c88385e-1a61-4100-81a9-1f9f1290af53"),
                            DNI = "20210570",
                            Direccion = "Calle D, 41, Piura",
                            Email = "comprador233@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3131),
                            Nombres = "María María",
                            RUC = "20428729201",
                            Telefono = "628706172"
                        },
                        new
                        {
                            ClienteId = new Guid("39bfaa65-9e24-4d50-b9c9-499598dbe1e3"),
                            DNI = "19279289",
                            Direccion = "Calle E, 87, Cusco",
                            Email = "cliente500@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3139),
                            Nombres = "Juan Luis",
                            RUC = "20428729201",
                            Telefono = "898563628"
                        },
                        new
                        {
                            ClienteId = new Guid("1d5cf94a-9875-4d57-839a-c78f6ee10779"),
                            DNI = "25735202",
                            Direccion = "Calle C, 5, Cusco",
                            Email = "cliente398@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 1, 4, 6, 20, 5, DateTimeKind.Utc).AddTicks(3147),
                            Nombres = "Lucía Pedro",
                            RUC = "20428729201",
                            Telefono = "422567215"
                        });
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.Property<Guid>("CompraPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MetodoPagoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("MontoPago")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("CompraPagoId");

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("CompraPago");
                });

            modelBuilder.Entity("Dominio.entities.DatosEscaneo", b =>
                {
                    b.Property<Guid>("DatosEscaneoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnteriorStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NuevoStock")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DatosEscaneoId");

                    b.ToTable("DatosEscaneo");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.Property<Guid>("DetalleInventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StockAnterior")
                        .HasColumnType("int");

                    b.Property<int?>("StockIngreso")
                        .HasColumnType("int");

                    b.Property<int?>("StockTotal")
                        .HasColumnType("int");

                    b.HasKey("DetalleInventarioId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleInventario");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Property<Guid>("DetallePedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DetallePedidoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.Property<Guid>("DevolucionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DetallePedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.HasKey("DevolucionId");

                    b.HasIndex("DetallePedidoId");

                    b.ToTable("Devolucion");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Property<Guid>("InventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CantidadProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Inventario");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.Property<Guid>("InventarioProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fechaentrega")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioProductoId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("InventarioProducto");
                });

            modelBuilder.Entity("Dominio.entities.MetodoPago", b =>
                {
                    b.Property<Guid>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoMetodo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodoPago");

                    b.HasData(
                        new
                        {
                            MetodoPagoId = new Guid("2921ae1b-171b-4d4f-b940-381fc2c0be42"),
                            TipoMetodo = "efectivo"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("7484104a-48a6-4f27-8041-ffeab27e2537"),
                            TipoMetodo = "Visa"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("32392a6f-2570-49fa-8fc9-798b322920ce"),
                            TipoMetodo = "MasterCard"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("25a03479-ebb3-4f75-a368-622ec0cd9373"),
                            TipoMetodo = "American Express"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("1beb2875-4b57-404c-ac78-2fbe1762b133"),
                            TipoMetodo = "PayPal"
                        });
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Property<Guid>("PrecioWebId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioWebId");

                    b.ToTable("PrecioWeb");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.Property<Guid>("PrecioWebProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnteriorPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NuevoPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PrecioWebId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrecioWebProductoId");

                    b.HasIndex("PrecioWebId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PrecioWebProducto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Property<Guid>("ProductoProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Preciocompra")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Preciounitario")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ProductoProveedorId");

                    b.ToTable("ProductoProveedor");

                    b.HasData(
                        new
                        {
                            ProductoProveedorId = new Guid("0a1ee0b0-a04e-4569-876f-4a9eb5735ce6"),
                            Preciocompra = 704.94m,
                            Preciounitario = 191.89m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("21b45a50-b7d4-40f8-94de-b320573bb411"),
                            Preciocompra = 366.63m,
                            Preciounitario = 818.58m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("3c5f0b8d-5883-47ae-8c20-af3d5b9ffa98"),
                            Preciocompra = 279.57m,
                            Preciounitario = 301.70m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("d476a1b4-57a8-4900-b4fb-8ef5647ef4ef"),
                            Preciocompra = 662.37m,
                            Preciounitario = 757.31m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("004002aa-27df-4e19-b289-f3dec6811a54"),
                            Preciocompra = 85.25m,
                            Preciounitario = 58.63m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("0f235ff2-1bd4-4bdd-b1e8-d3b631a17973"),
                            Preciocompra = 85.60m,
                            Preciounitario = 505.69m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("879b4802-82f8-4172-8b9f-258c894a84f9"),
                            Preciocompra = 414.97m,
                            Preciounitario = 184.21m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("aba5e142-31fb-480b-91b4-bacfdcf1d0f0"),
                            Preciocompra = 89.43m,
                            Preciounitario = 393.19m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("9d677ca9-ceb6-44cf-acd5-6898c5142a49"),
                            Preciocompra = 5.20m,
                            Preciounitario = 596.81m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("39b689f3-b1c7-4b61-a44a-b35db4dc7deb"),
                            Preciocompra = 891.77m,
                            Preciounitario = 694.99m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("345ffa63-c6bd-4ee2-aec0-15a483bddac1"),
                            Preciocompra = 453.07m,
                            Preciounitario = 995.95m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("6158a637-265b-43bd-8474-ebdb22b762be"),
                            Preciocompra = 556.21m,
                            Preciounitario = 105.42m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("427f5a12-67f6-4fb1-8869-accb0b923ed2"),
                            Preciocompra = 512.32m,
                            Preciounitario = 248.05m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c675dafe-01c6-494b-a9ea-df7ba4170e27"),
                            Preciocompra = 912.97m,
                            Preciounitario = 913.49m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("4dbc7fec-d030-4166-9198-3769166e17b1"),
                            Preciocompra = 173.01m,
                            Preciounitario = 438.30m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("925801d0-db20-4bc3-8511-8df8e1daf4bc"),
                            Preciocompra = 612.74m,
                            Preciounitario = 241.42m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("0407737c-29f7-4796-b448-c68d03c9afcf"),
                            Preciocompra = 560.76m,
                            Preciounitario = 622.70m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("64714694-60de-4409-b19b-015514e28d65"),
                            Preciocompra = 338.34m,
                            Preciounitario = 924.92m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("19b60b72-fe13-484a-8b74-c8705bbc0715"),
                            Preciocompra = 742.93m,
                            Preciounitario = 432.40m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ace59ed3-9698-4976-8f0e-39ede4d506ee"),
                            Preciocompra = 349.75m,
                            Preciounitario = 487.41m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c0db53c1-ff98-4196-b71a-83172245d642"),
                            Preciocompra = 697.77m,
                            Preciounitario = 941.53m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("55e8890e-b98b-4bc5-91dd-46ee4c4b9253"),
                            Preciocompra = 332.11m,
                            Preciounitario = 63.68m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("5aa59da5-e773-4da4-a568-544d80d54bfa"),
                            Preciocompra = 463.67m,
                            Preciounitario = 44.39m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("fd9e7054-45f9-449d-bbe9-8165af8fd62d"),
                            Preciocompra = 209.92m,
                            Preciounitario = 31.65m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("cbd2f97e-d5e2-402d-bd0b-7009fe18ff2e"),
                            Preciocompra = 34.74m,
                            Preciounitario = 200.40m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("9d9d06de-9ef3-464b-8ddb-ef6d16e84a73"),
                            Preciocompra = 905.44m,
                            Preciounitario = 601.90m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ac279da4-99c6-44ac-b166-bb890bf4c232"),
                            Preciocompra = 397.27m,
                            Preciounitario = 430.49m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("f09b2bfe-dbe6-4592-a0ce-5ba497b8b73c"),
                            Preciocompra = 551.45m,
                            Preciounitario = 865.16m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("207b7bb4-f927-4d36-ade8-93068e03df29"),
                            Preciocompra = 428.79m,
                            Preciounitario = 13.71m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("b0695150-fd12-43ce-959d-e758558c1ae0"),
                            Preciocompra = 73.70m,
                            Preciounitario = 151.12m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("14134ee9-de1c-47f3-aadd-a87b555a75d3"),
                            Preciocompra = 340.89m,
                            Preciounitario = 596.20m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("e308ad4d-7021-4db8-832c-b2ff002239c1"),
                            Preciocompra = 404.45m,
                            Preciounitario = 117.66m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("59759d0f-c3e1-4330-a181-45ff732e68ee"),
                            Preciocompra = 689.70m,
                            Preciounitario = 158.11m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("e73b17b4-bd39-4b10-809b-61c62f82dc17"),
                            Preciocompra = 818.31m,
                            Preciounitario = 687.06m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("7ea68be5-0120-40bd-81fb-d8e82ac03f77"),
                            Preciocompra = 684.40m,
                            Preciounitario = 711.21m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c7a2c489-e0c8-4795-a01e-46a7a7bd7f2b"),
                            Preciocompra = 619.96m,
                            Preciounitario = 713.93m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("8a62c2e0-bbe7-4ff2-ae9e-4c4d4f393128"),
                            Preciocompra = 873.64m,
                            Preciounitario = 954.62m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("cbc22ef3-4c5f-497c-ab3c-9e59b566cea5"),
                            Preciocompra = 801.99m,
                            Preciounitario = 530.99m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("10e0254c-b556-4bfd-975b-a446c9ea568d"),
                            Preciocompra = 404.15m,
                            Preciounitario = 109.66m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("7aa86c77-ab4b-4a0d-b2e4-52d220077b26"),
                            Preciocompra = 490.52m,
                            Preciounitario = 806.29m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("2ad295ac-4ddc-425b-9c41-42fc4fe6337a"),
                            Preciocompra = 797.58m,
                            Preciounitario = 21.14m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("fd6a4c67-0ca3-40a0-9942-a03fd3f95246"),
                            Preciocompra = 196.84m,
                            Preciounitario = 123.01m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("e9919ed8-3721-446a-81c6-3ff7ebf5781e"),
                            Preciocompra = 879.51m,
                            Preciounitario = 649.01m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("9f28d6cb-b9dd-4546-9ab6-4a9e1d280711"),
                            Preciocompra = 869.63m,
                            Preciounitario = 418.59m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("db2a45b5-8d51-49c4-b073-33cab12d357a"),
                            Preciocompra = 208.05m,
                            Preciounitario = 951.26m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("a061e04d-9b78-4b3a-933f-73168b8de749"),
                            Preciocompra = 825.00m,
                            Preciounitario = 614.14m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("f34e94b7-613c-4285-9b40-9df0c59bfaf4"),
                            Preciocompra = 8.81m,
                            Preciounitario = 91.52m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("3d9aa8dc-52ed-45ce-a5ee-a3617c706d2d"),
                            Preciocompra = 172.79m,
                            Preciounitario = 678.52m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("5fc86587-cb5b-4162-b97f-26021ecb7050"),
                            Preciocompra = 455.19m,
                            Preciounitario = 896.63m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("37bb82e7-1619-46fe-9998-095915812a38"),
                            Preciocompra = 730.35m,
                            Preciounitario = 669.02m
                        });
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Property<Guid>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Property<Guid>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.HasOne("Dominio.entities.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId");

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Inventario");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Dominio.entities.Venta", "Venta")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.HasOne("Dominio.entities.DetallePedido", "DetallePedido")
                        .WithMany("Devolucionlista")
                        .HasForeignKey("DetallePedidoId");

                    b.Navigation("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.HasOne("Dominio.entities.Proveedor", "Proveedor")
                        .WithMany("Inventariolista")
                        .HasForeignKey("ProveedorId");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("InventarioProductolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("InventarioProducto")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("Inventario");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.HasOne("Dominio.entities.PrecioWeb", "PrecioWeb")
                        .WithMany("PrecioWeblista")
                        .HasForeignKey("PrecioWebId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("PrecioWebProductolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("PrecioWeb");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.HasOne("Dominio.entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("Proveedorlista")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.HasOne("Dominio.entities.Cliente", "Cliente")
                        .WithMany("Ventalista")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Navigation("Ventalista");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Navigation("Devolucionlista");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("InventarioProductolista");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Navigation("PrecioWeblista");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("DetallePedidolista");

                    b.Navigation("PrecioWebProductolista");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Navigation("InventarioProducto");

                    b.Navigation("Proveedorlista");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Navigation("Inventariolista");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Navigation("DetallePedidolista");
                });
#pragma warning restore 612, 618
        }
    }
}
