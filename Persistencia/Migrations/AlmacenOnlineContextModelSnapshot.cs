// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(AlmacenOnlineContext))]
    partial class AlmacenOnlineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.entities.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            CategoriaId = new Guid("9799e4a7-4fab-4ca0-a70e-0cacedc747bf"),
                            NombreCategoria = "Placa madre"
                        },
                        new
                        {
                            CategoriaId = new Guid("03afe943-ca5e-4a69-a2c8-0c8588ea2976"),
                            NombreCategoria = "Tarjeta gráfica"
                        },
                        new
                        {
                            CategoriaId = new Guid("e8f375b8-0b1a-447a-9f47-060fab1bb170"),
                            NombreCategoria = "Fuente de alimentación"
                        },
                        new
                        {
                            CategoriaId = new Guid("5f96a417-f471-49c6-b278-21813ca1a007"),
                            NombreCategoria = "Memoria RAM"
                        },
                        new
                        {
                            CategoriaId = new Guid("7f0337e7-a65c-4a57-aa8c-8df3f33bcfca"),
                            NombreCategoria = "Disco duro SSD"
                        },
                        new
                        {
                            CategoriaId = new Guid("0b249712-dd6f-4ddd-94fc-8eb52791bd2f"),
                            NombreCategoria = "Procesador"
                        });
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            ClienteId = new Guid("33a2d44b-8d01-4cd5-86f9-b650dddcb83f"),
                            DNI = "90682756",
                            Direccion = "Calle A, 92, Cusco",
                            Email = "cliente178@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9311),
                            Nombres = "Lucía Ana",
                            RUC = "20428729201",
                            Telefono = "319968920"
                        },
                        new
                        {
                            ClienteId = new Guid("5ee6c4be-5cec-4828-b2b7-f6c7fc18ccbd"),
                            DNI = "90352780",
                            Direccion = "Calle B, 34, Cusco",
                            Email = "usuario126@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9331),
                            Nombres = "Laura Laura",
                            RUC = "20428729201",
                            Telefono = "171886858"
                        },
                        new
                        {
                            ClienteId = new Guid("8a645cdc-0dbc-4254-b884-7fd30dc4e6f9"),
                            DNI = "40443270",
                            Direccion = "Calle A, 8, Arequipa",
                            Email = "comprador214@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9339),
                            Nombres = "María Carlos",
                            RUC = "20428729201",
                            Telefono = "374825382"
                        },
                        new
                        {
                            ClienteId = new Guid("5c48306b-7bfd-4ab6-95c8-77c33b87f3c8"),
                            DNI = "36021212",
                            Direccion = "Calle D, 95, Lima",
                            Email = "comprador823@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9347),
                            Nombres = "Juan Luis",
                            RUC = "20428729201",
                            Telefono = "766633834"
                        },
                        new
                        {
                            ClienteId = new Guid("5c0a6f81-ee48-4ed6-83d9-78556630196d"),
                            DNI = "35542671",
                            Direccion = "Calle C, 3, Arequipa",
                            Email = "usuario393@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9389),
                            Nombres = "Juan Juan",
                            RUC = "20428729201",
                            Telefono = "667070672"
                        },
                        new
                        {
                            ClienteId = new Guid("11fa2766-849f-4d40-a843-7bef71b7ad34"),
                            DNI = "26225371",
                            Direccion = "Calle E, 41, Arequipa",
                            Email = "contacto328@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9397),
                            Nombres = "Carlos Diego",
                            RUC = "20428729201",
                            Telefono = "396749250"
                        },
                        new
                        {
                            ClienteId = new Guid("ed37995a-4a78-472c-9ed6-5bed5cc42b4f"),
                            DNI = "12647563",
                            Direccion = "Calle A, 64, Trujillo",
                            Email = "correo515@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9405),
                            Nombres = "Ana Diego",
                            RUC = "20428729201",
                            Telefono = "238947536"
                        },
                        new
                        {
                            ClienteId = new Guid("c1a12d06-165d-4473-b2fc-cd4ec4804c10"),
                            DNI = "60839875",
                            Direccion = "Calle A, 91, Trujillo",
                            Email = "comprador813@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9411),
                            Nombres = "Diego Juan",
                            RUC = "20428729201",
                            Telefono = "626386640"
                        },
                        new
                        {
                            ClienteId = new Guid("b4642ec2-b0d2-40d8-a007-cae3978b61f5"),
                            DNI = "83508361",
                            Direccion = "Calle D, 13, Arequipa",
                            Email = "cliente925@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9418),
                            Nombres = "Luis Laura",
                            RUC = "20428729201",
                            Telefono = "497149405"
                        },
                        new
                        {
                            ClienteId = new Guid("e3e4d5d6-dee6-4075-8240-97c2d7d1ea72"),
                            DNI = "18231853",
                            Direccion = "Calle C, 74, Arequipa",
                            Email = "correo104@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9428),
                            Nombres = "Diego Carlos",
                            RUC = "20428729201",
                            Telefono = "195109505"
                        },
                        new
                        {
                            ClienteId = new Guid("0d79076d-d68c-4616-9669-3961b11adcbd"),
                            DNI = "21552324",
                            Direccion = "Calle C, 78, Lima",
                            Email = "comprador323@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9435),
                            Nombres = "María Sofía",
                            RUC = "20428729201",
                            Telefono = "694202665"
                        },
                        new
                        {
                            ClienteId = new Guid("8450a3db-6e45-44d5-899e-f501b921379a"),
                            DNI = "34304444",
                            Direccion = "Calle A, 36, Piura",
                            Email = "contacto667@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9442),
                            Nombres = "Luis Laura",
                            RUC = "20428729201",
                            Telefono = "706316851"
                        },
                        new
                        {
                            ClienteId = new Guid("6abdd297-ba23-4dad-b5b1-913a695cd0e0"),
                            DNI = "19382849",
                            Direccion = "Calle D, 66, Trujillo",
                            Email = "usuario672@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9449),
                            Nombres = "Laura Juan",
                            RUC = "20428729201",
                            Telefono = "611456509"
                        },
                        new
                        {
                            ClienteId = new Guid("586d7072-a6bc-466b-8d00-17afe0c09c92"),
                            DNI = "65108348",
                            Direccion = "Calle D, 85, Trujillo",
                            Email = "usuario767@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9455),
                            Nombres = "Carlos Diego",
                            RUC = "20428729201",
                            Telefono = "542313331"
                        },
                        new
                        {
                            ClienteId = new Guid("9f411d68-53fe-4271-ad01-e1e90327504d"),
                            DNI = "67906716",
                            Direccion = "Calle B, 21, Lima",
                            Email = "usuario534@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9462),
                            Nombres = "Sofía Ana",
                            RUC = "20428729201",
                            Telefono = "877546326"
                        },
                        new
                        {
                            ClienteId = new Guid("126991b3-8fb2-43f7-9c09-c76b4dc82928"),
                            DNI = "44651414",
                            Direccion = "Calle E, 38, Arequipa",
                            Email = "usuario968@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9468),
                            Nombres = "Carlos María",
                            RUC = "20428729201",
                            Telefono = "682153556"
                        },
                        new
                        {
                            ClienteId = new Guid("7c1b28f9-0867-4766-a36b-fc8e412ba4a1"),
                            DNI = "48490231",
                            Direccion = "Calle C, 92, Piura",
                            Email = "comprador452@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9506),
                            Nombres = "Lucía Lucía",
                            RUC = "20428729201",
                            Telefono = "114467770"
                        },
                        new
                        {
                            ClienteId = new Guid("d647c5dd-fb2a-4bf6-9987-85a20cfc1f49"),
                            DNI = "28474035",
                            Direccion = "Calle E, 28, Piura",
                            Email = "usuario23@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9516),
                            Nombres = "Diego Diego",
                            RUC = "20428729201",
                            Telefono = "791206748"
                        },
                        new
                        {
                            ClienteId = new Guid("c14fd405-6730-40d7-9795-32f0ec93e148"),
                            DNI = "80113193",
                            Direccion = "Calle B, 60, Cusco",
                            Email = "correo212@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9523),
                            Nombres = "Sofía María",
                            RUC = "20428729201",
                            Telefono = "169785528"
                        },
                        new
                        {
                            ClienteId = new Guid("bcb3bd50-e038-4c79-b258-0c2a01db3e9c"),
                            DNI = "61501267",
                            Direccion = "Calle A, 13, Lima",
                            Email = "comprador142@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9530),
                            Nombres = "Laura Carlos",
                            RUC = "20428729201",
                            Telefono = "219727602"
                        },
                        new
                        {
                            ClienteId = new Guid("4a3fe57f-44ff-4a53-8a85-3323a2358e12"),
                            DNI = "22626521",
                            Direccion = "Calle C, 83, Cusco",
                            Email = "comprador466@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9536),
                            Nombres = "Carlos Sofía",
                            RUC = "20428729201",
                            Telefono = "647501701"
                        },
                        new
                        {
                            ClienteId = new Guid("3dbcc228-8979-4ad0-b778-a0dcea2e257c"),
                            DNI = "94565777",
                            Direccion = "Calle A, 15, Piura",
                            Email = "usuario904@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9542),
                            Nombres = "Laura Ana",
                            RUC = "20428729201",
                            Telefono = "203923116"
                        },
                        new
                        {
                            ClienteId = new Guid("2cc7be12-7baf-4717-97d1-2d6cee2d0cc2"),
                            DNI = "12966658",
                            Direccion = "Calle D, 13, Arequipa",
                            Email = "cliente580@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9549),
                            Nombres = "Laura Sofía",
                            RUC = "20428729201",
                            Telefono = "386640264"
                        },
                        new
                        {
                            ClienteId = new Guid("5f39556d-3736-45f3-a98c-2135cc3f63f3"),
                            DNI = "52183809",
                            Direccion = "Calle A, 38, Arequipa",
                            Email = "cliente231@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9555),
                            Nombres = "Lucía Diego",
                            RUC = "20428729201",
                            Telefono = "871777121"
                        },
                        new
                        {
                            ClienteId = new Guid("78ea5f7c-96c6-4847-ba6d-24e3cf5c3fe1"),
                            DNI = "23466514",
                            Direccion = "Calle E, 6, Arequipa",
                            Email = "correo587@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9562),
                            Nombres = "Luis Carlos",
                            RUC = "20428729201",
                            Telefono = "399524287"
                        },
                        new
                        {
                            ClienteId = new Guid("ad7ae9f5-b986-4d75-bd61-72290754175f"),
                            DNI = "21903659",
                            Direccion = "Calle D, 19, Arequipa",
                            Email = "correo609@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9570),
                            Nombres = "Carlos Laura",
                            RUC = "20428729201",
                            Telefono = "788221495"
                        },
                        new
                        {
                            ClienteId = new Guid("c416465c-43ab-4024-9938-c351757b1f84"),
                            DNI = "92284717",
                            Direccion = "Calle B, 32, Piura",
                            Email = "cliente306@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9577),
                            Nombres = "Carlos Ana",
                            RUC = "20428729201",
                            Telefono = "972107901"
                        },
                        new
                        {
                            ClienteId = new Guid("4e9c0e61-aa86-4fca-8a88-356f674a2913"),
                            DNI = "31690674",
                            Direccion = "Calle C, 35, Piura",
                            Email = "correo808@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9607),
                            Nombres = "Laura Carlos",
                            RUC = "20428729201",
                            Telefono = "254756980"
                        },
                        new
                        {
                            ClienteId = new Guid("6fcc6297-adcc-42e2-9857-4a333437b680"),
                            DNI = "34601394",
                            Direccion = "Calle B, 58, Lima",
                            Email = "usuario243@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9613),
                            Nombres = "Diego Sofía",
                            RUC = "20428729201",
                            Telefono = "877142650"
                        },
                        new
                        {
                            ClienteId = new Guid("d2f7b4fc-1c01-4943-a112-1dcc683867e3"),
                            DNI = "38925836",
                            Direccion = "Calle B, 96, Cusco",
                            Email = "cliente522@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9620),
                            Nombres = "Laura Lucía",
                            RUC = "20428729201",
                            Telefono = "786108775"
                        },
                        new
                        {
                            ClienteId = new Guid("2d459072-80c9-4034-a5ff-3dced01db33e"),
                            DNI = "74009375",
                            Direccion = "Calle E, 39, Cusco",
                            Email = "usuario778@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9626),
                            Nombres = "Laura Sofía",
                            RUC = "20428729201",
                            Telefono = "168860627"
                        },
                        new
                        {
                            ClienteId = new Guid("63ccd400-0e68-4bf3-af6a-58df182c0bdd"),
                            DNI = "91265207",
                            Direccion = "Calle E, 51, Cusco",
                            Email = "comprador451@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9633),
                            Nombres = "Laura Laura",
                            RUC = "20428729201",
                            Telefono = "570611304"
                        },
                        new
                        {
                            ClienteId = new Guid("6f7569b0-17ce-4464-b389-113b4ce02869"),
                            DNI = "19172444",
                            Direccion = "Calle C, 55, Cusco",
                            Email = "comprador733@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9639),
                            Nombres = "Luis Laura",
                            RUC = "20428729201",
                            Telefono = "247462723"
                        },
                        new
                        {
                            ClienteId = new Guid("474aa05c-a714-4ea3-9024-718eb0b60a5e"),
                            DNI = "40090833",
                            Direccion = "Calle E, 33, Lima",
                            Email = "usuario504@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9647),
                            Nombres = "Carlos Laura",
                            RUC = "20428729201",
                            Telefono = "664155112"
                        },
                        new
                        {
                            ClienteId = new Guid("5f93fa47-3ccf-4a7c-b006-66f39b49d1a0"),
                            DNI = "91649858",
                            Direccion = "Calle C, 48, Trujillo",
                            Email = "cliente137@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9654),
                            Nombres = "Pedro Pedro",
                            RUC = "20428729201",
                            Telefono = "400577372"
                        },
                        new
                        {
                            ClienteId = new Guid("edc50b65-840b-4a69-b125-cc91026eb164"),
                            DNI = "15236727",
                            Direccion = "Calle A, 96, Piura",
                            Email = "correo182@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9660),
                            Nombres = "Diego Luis",
                            RUC = "20428729201",
                            Telefono = "836227130"
                        },
                        new
                        {
                            ClienteId = new Guid("334eb905-ae32-45ec-a539-033967204104"),
                            DNI = "33596840",
                            Direccion = "Calle B, 71, Cusco",
                            Email = "correo880@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9667),
                            Nombres = "Diego Laura",
                            RUC = "20428729201",
                            Telefono = "196101588"
                        },
                        new
                        {
                            ClienteId = new Guid("e2f99fa9-2457-4443-8a64-d698ba1af1d2"),
                            DNI = "59322638",
                            Direccion = "Calle D, 83, Cusco",
                            Email = "correo73@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9673),
                            Nombres = "Carlos Ana",
                            RUC = "20428729201",
                            Telefono = "448928565"
                        },
                        new
                        {
                            ClienteId = new Guid("fd30bce6-b1ce-43d8-8fc2-a1faa638ff80"),
                            DNI = "29289673",
                            Direccion = "Calle E, 95, Trujillo",
                            Email = "contacto746@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9706),
                            Nombres = "Carlos Carlos",
                            RUC = "20428729201",
                            Telefono = "906258525"
                        },
                        new
                        {
                            ClienteId = new Guid("49f464e8-99dc-41fa-8eaa-e97fc9bda57c"),
                            DNI = "57609722",
                            Direccion = "Calle E, 64, Cusco",
                            Email = "correo12@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9713),
                            Nombres = "Luis Lucía",
                            RUC = "20428729201",
                            Telefono = "861550794"
                        },
                        new
                        {
                            ClienteId = new Guid("213a1a0f-e357-4359-9cbc-7a49e9e3de66"),
                            DNI = "70591647",
                            Direccion = "Calle C, 71, Piura",
                            Email = "cliente143@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9719),
                            Nombres = "Ana Lucía",
                            RUC = "20428729201",
                            Telefono = "994734250"
                        },
                        new
                        {
                            ClienteId = new Guid("78da8779-6196-4ff1-b2aa-2361058fdd05"),
                            DNI = "68713038",
                            Direccion = "Calle B, 43, Piura",
                            Email = "comprador986@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9728),
                            Nombres = "Luis María",
                            RUC = "20428729201",
                            Telefono = "270254784"
                        },
                        new
                        {
                            ClienteId = new Guid("4fbe99c1-5593-4f35-a4a5-c723efd54317"),
                            DNI = "13622468",
                            Direccion = "Calle D, 89, Cusco",
                            Email = "cliente25@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9734),
                            Nombres = "Carlos Lucía",
                            RUC = "20428729201",
                            Telefono = "230166653"
                        },
                        new
                        {
                            ClienteId = new Guid("66a8db37-0709-4ce1-8651-7c0e413d2be1"),
                            DNI = "59898441",
                            Direccion = "Calle B, 53, Arequipa",
                            Email = "correo963@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9741),
                            Nombres = "Sofía Carlos",
                            RUC = "20428729201",
                            Telefono = "274859585"
                        },
                        new
                        {
                            ClienteId = new Guid("ad547c16-9544-4f56-92d6-e17c5126e07b"),
                            DNI = "15087641",
                            Direccion = "Calle A, 37, Trujillo",
                            Email = "correo392@yahoo.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9748),
                            Nombres = "Juan María",
                            RUC = "20428729201",
                            Telefono = "313004253"
                        },
                        new
                        {
                            ClienteId = new Guid("e9906db8-8b4d-4ae7-99d1-346203461895"),
                            DNI = "16552269",
                            Direccion = "Calle A, 44, Piura",
                            Email = "usuario50@example.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9755),
                            Nombres = "María Juan",
                            RUC = "20428729201",
                            Telefono = "201159091"
                        },
                        new
                        {
                            ClienteId = new Guid("c66bfb07-ad07-4d13-b97d-8a9de7ec6dd7"),
                            DNI = "63228196",
                            Direccion = "Calle C, 3, Piura",
                            Email = "contacto891@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9761),
                            Nombres = "Laura Diego",
                            RUC = "20428729201",
                            Telefono = "959007828"
                        },
                        new
                        {
                            ClienteId = new Guid("7c7489c5-7265-4ff8-aba7-a87cba10b6a4"),
                            DNI = "91088401",
                            Direccion = "Calle A, 48, Arequipa",
                            Email = "cliente141@outlook.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9767),
                            Nombres = "Lucía Luis",
                            RUC = "20428729201",
                            Telefono = "356690733"
                        },
                        new
                        {
                            ClienteId = new Guid("9241543a-abf2-4314-b8f6-ef6137afea73"),
                            DNI = "70075060",
                            Direccion = "Calle B, 19, Piura",
                            Email = "usuario129@hotmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9774),
                            Nombres = "Lucía Lucía",
                            RUC = "20428729201",
                            Telefono = "142937363"
                        },
                        new
                        {
                            ClienteId = new Guid("042dd2c1-1c6e-4aad-92f8-5cf5294fa67c"),
                            DNI = "94140184",
                            Direccion = "Calle C, 3, Cusco",
                            Email = "usuario363@gmail.com",
                            Fecharegistro = new DateTime(2024, 7, 7, 20, 53, 5, 577, DateTimeKind.Utc).AddTicks(9783),
                            Nombres = "Ana Pedro",
                            RUC = "20428729201",
                            Telefono = "272193453"
                        });
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.Property<Guid>("CompraPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MetodoPagoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("MontoPago")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("CompraPagoId");

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("CompraPago");
                });

            modelBuilder.Entity("Dominio.entities.DatosEscaneo", b =>
                {
                    b.Property<Guid>("DatosEscaneoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnteriorStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NuevoStock")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DatosEscaneoId");

                    b.ToTable("DatosEscaneo");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.Property<Guid>("DetalleInventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StockAnterior")
                        .HasColumnType("int");

                    b.Property<int?>("StockIngreso")
                        .HasColumnType("int");

                    b.Property<int?>("StockTotal")
                        .HasColumnType("int");

                    b.HasKey("DetalleInventarioId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleInventario");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Property<Guid>("DetallePedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VentaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DetallePedidoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.Property<Guid>("DevolucionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DetallePedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.HasKey("DevolucionId");

                    b.HasIndex("DetallePedidoId");

                    b.ToTable("Devolucion");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Property<Guid>("InventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CantidadProducto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreInventario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Inventario");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.Property<Guid>("InventarioProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fechaentrega")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InventarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventarioProductoId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("InventarioProducto");
                });

            modelBuilder.Entity("Dominio.entities.MetodoPago", b =>
                {
                    b.Property<Guid>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoMetodo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetodoPagoId");

                    b.ToTable("MetodoPago");

                    b.HasData(
                        new
                        {
                            MetodoPagoId = new Guid("3b65abc5-cdf6-4552-b7c4-277dd53882ca"),
                            TipoMetodo = "efectivo"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("98445684-5420-49d4-ac80-be80e48d52e7"),
                            TipoMetodo = "Visa"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("3fb51201-5763-4ba9-bc09-36929a2eddb6"),
                            TipoMetodo = "MasterCard"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("b363b921-a195-452b-9002-f353768288a6"),
                            TipoMetodo = "American Express"
                        },
                        new
                        {
                            MetodoPagoId = new Guid("e39dbd7f-bee9-414d-ab0e-8b4e49692fd4"),
                            TipoMetodo = "PayPal"
                        });
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Property<Guid>("PrecioWebId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioWebId");

                    b.ToTable("PrecioWeb");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.Property<Guid>("PrecioWebProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AnteriorPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NuevoPrecio")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PrecioWebId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrecioWebProductoId");

                    b.HasIndex("PrecioWebId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PrecioWebProducto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Property<Guid>("ProductoProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Preciocompra")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Preciounitario")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ProductoProveedorId");

                    b.ToTable("ProductoProveedor");

                    b.HasData(
                        new
                        {
                            ProductoProveedorId = new Guid("ab56564e-a256-4082-9fa7-9cecee0cf26a"),
                            Preciocompra = 688.20m,
                            Preciounitario = 910.00m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("17e7449b-45bf-439e-beaa-0318bb2ecc1b"),
                            Preciocompra = 758.95m,
                            Preciounitario = 388.55m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("8bafb057-1ba5-446b-9c0e-32877958c906"),
                            Preciocompra = 594.75m,
                            Preciounitario = 377.30m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("51e53a68-893f-4a18-bdb7-684b959f6a85"),
                            Preciocompra = 767.21m,
                            Preciounitario = 450.45m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("f74b2ccd-1264-4468-88b8-3fbfdf02fd5b"),
                            Preciocompra = 530.64m,
                            Preciounitario = 21.63m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ebf5708a-6368-4f75-9f5b-77cda4f920e3"),
                            Preciocompra = 603.17m,
                            Preciounitario = 653.43m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("a210b81d-57d3-4f60-813a-e59f45e1c130"),
                            Preciocompra = 926.49m,
                            Preciounitario = 342.58m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("db8ad285-21fe-489c-b554-6ee454462928"),
                            Preciocompra = 811.66m,
                            Preciounitario = 779.11m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("3ca1c209-b37e-44cb-8ea2-d6e5f4ca59d8"),
                            Preciocompra = 720.42m,
                            Preciounitario = 671.89m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("3267b8be-e8ed-4581-8b25-586a0760ea72"),
                            Preciocompra = 928.31m,
                            Preciounitario = 118.86m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("51acbf24-b11e-432d-91f9-3b0aa53d1602"),
                            Preciocompra = 458.62m,
                            Preciounitario = 204.41m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("a0db3bc9-4b72-488c-a64c-8ef2a6f7112e"),
                            Preciocompra = 743.70m,
                            Preciounitario = 245.05m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c66128f2-ac05-4164-a9c9-cab8d31a9f8d"),
                            Preciocompra = 537.53m,
                            Preciounitario = 101.30m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("1adc2aa1-d127-4d2f-94d6-068b1d11fed2"),
                            Preciocompra = 747.24m,
                            Preciounitario = 484.76m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("d2669360-639f-4863-90b3-652d860639d9"),
                            Preciocompra = 31.97m,
                            Preciounitario = 823.28m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("d643f595-554e-41a3-8172-e824e9e32e61"),
                            Preciocompra = 953.11m,
                            Preciounitario = 40.47m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("8f160ceb-3f81-4386-b0b9-8457ca32b86a"),
                            Preciocompra = 21.03m,
                            Preciounitario = 844.51m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c960ee6b-1eb3-43ae-a48a-a3d59bdf762d"),
                            Preciocompra = 551.84m,
                            Preciounitario = 900.18m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("a16b7439-adb4-4bf8-8a86-54f5565f17b1"),
                            Preciocompra = 603.98m,
                            Preciounitario = 686.47m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("600f5850-3336-42ef-b44f-98937bc3f785"),
                            Preciocompra = 507.69m,
                            Preciounitario = 491.79m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ec0ff63b-d58c-4397-bca3-6695e3c6e3e4"),
                            Preciocompra = 401.33m,
                            Preciounitario = 800.13m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("cc8c6524-b2a3-44f3-b295-5ba778044d6f"),
                            Preciocompra = 592.69m,
                            Preciounitario = 292.32m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("56bd4e9a-d020-41a2-a325-b620843924c2"),
                            Preciocompra = 450.29m,
                            Preciounitario = 875.52m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("aec4cca2-4907-408e-a9b6-c8773cda21fa"),
                            Preciocompra = 299.24m,
                            Preciounitario = 15.36m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("c1e857b3-7829-4ba1-a0ca-a534f159efef"),
                            Preciocompra = 871.09m,
                            Preciounitario = 333.08m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("cbe16142-3f4c-4777-b726-3f1757221229"),
                            Preciocompra = 122.69m,
                            Preciounitario = 848.76m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("3466f800-5f38-41ec-beaa-dad3de255f0f"),
                            Preciocompra = 921.95m,
                            Preciounitario = 23.84m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("33c2719d-8d83-41ab-82a4-a6e9b890b21f"),
                            Preciocompra = 710.13m,
                            Preciounitario = 582.24m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("981a6217-1879-42c1-9ad1-54192c3222e6"),
                            Preciocompra = 889.76m,
                            Preciounitario = 851.98m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("2bcbb5d7-d346-41dd-b39a-00dbc6f47b68"),
                            Preciocompra = 0.16m,
                            Preciounitario = 648.37m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("a0a31f75-af5a-4ecd-951b-492f674f7e51"),
                            Preciocompra = 274.24m,
                            Preciounitario = 959.19m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("340cbb89-fcfa-485b-b514-819b670f712f"),
                            Preciocompra = 813.24m,
                            Preciounitario = 413.26m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("d98d4ce7-66f7-4e96-b597-fe780a32d116"),
                            Preciocompra = 709.68m,
                            Preciounitario = 927.58m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("31f8568c-81b6-45c6-9c90-2566bfcd2bfc"),
                            Preciocompra = 102.84m,
                            Preciounitario = 388.98m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("b62ed0cf-9786-472b-95fa-1a36729c0511"),
                            Preciocompra = 281.67m,
                            Preciounitario = 965.35m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("ad23b9a3-64b4-45c2-92b8-09044013c903"),
                            Preciocompra = 393.71m,
                            Preciounitario = 977.64m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("863743d3-6861-4c27-8799-1c991d241076"),
                            Preciocompra = 54.77m,
                            Preciounitario = 760.66m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("58d76b43-625d-467e-abf8-eafee04c7cca"),
                            Preciocompra = 434.02m,
                            Preciounitario = 711.60m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("bcaf0deb-b665-48ed-8723-62d620ff906b"),
                            Preciocompra = 696.64m,
                            Preciounitario = 1.15m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("74257373-7f6c-4224-9c38-2ee1f686cdff"),
                            Preciocompra = 417.10m,
                            Preciounitario = 736.76m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("eb15e6cb-f762-43a8-aa57-3d766168ca68"),
                            Preciocompra = 388.41m,
                            Preciounitario = 734.68m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("4f2564d8-61fb-4179-aba8-484875d7c8db"),
                            Preciocompra = 901.59m,
                            Preciounitario = 295.79m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("bad0dcd6-1423-48a6-8131-dfaece5fc002"),
                            Preciocompra = 759.09m,
                            Preciounitario = 983.06m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("6f5a59ed-5c9d-4d74-b407-e14e089333d8"),
                            Preciocompra = 51.91m,
                            Preciounitario = 859.87m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("d8f1eb1a-3028-4654-9b96-ba8f18242470"),
                            Preciocompra = 491.61m,
                            Preciounitario = 501.18m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("f5a6bcee-eaa9-4db8-b4de-3e5830f36294"),
                            Preciocompra = 143.16m,
                            Preciounitario = 933.86m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("cd4c2ca7-588f-4e90-800e-a1bfcfc3d245"),
                            Preciocompra = 537.30m,
                            Preciounitario = 791.87m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("28898dd3-a8de-4851-9505-5babd343a19a"),
                            Preciocompra = 963.16m,
                            Preciounitario = 172.96m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("049fdac4-5677-49d2-969f-131627578055"),
                            Preciocompra = 960.04m,
                            Preciounitario = 51.13m
                        },
                        new
                        {
                            ProductoProveedorId = new Guid("a854a9e1-39f5-4a77-8f14-40c5b282d609"),
                            Preciocompra = 53.53m,
                            Preciounitario = 45.06m
                        });
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Property<Guid>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecharegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductoProveedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.HasIndex("ProductoProveedorId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Property<Guid>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PrecioTotal")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("VentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dominio.entities.CompraPago", b =>
                {
                    b.HasOne("Dominio.entities.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId");

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Dominio.entities.DetalleInventario", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetalleInventariolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Inventario");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Dominio.entities.Venta", "Venta")
                        .WithMany("DetallePedidolista")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.entities.Devolucion", b =>
                {
                    b.HasOne("Dominio.entities.DetallePedido", "DetallePedido")
                        .WithMany("Devolucionlista")
                        .HasForeignKey("DetallePedidoId");

                    b.Navigation("DetallePedido");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.HasOne("Dominio.entities.Proveedor", "Proveedor")
                        .WithMany("Inventariolista")
                        .HasForeignKey("ProveedorId");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.entities.InventarioProducto", b =>
                {
                    b.HasOne("Dominio.entities.Inventario", "Inventario")
                        .WithMany("InventarioProductolista")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("InventarioProducto")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("Inventario");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWebProducto", b =>
                {
                    b.HasOne("Dominio.entities.PrecioWeb", "PrecioWeb")
                        .WithMany("PrecioWeblista")
                        .HasForeignKey("PrecioWebId");

                    b.HasOne("Dominio.entities.Producto", "Producto")
                        .WithMany("PrecioWebProductolista")
                        .HasForeignKey("ProductoId");

                    b.Navigation("PrecioWeb");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.HasOne("Dominio.entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.HasOne("Dominio.entities.ProductoProveedor", "ProductoProveedor")
                        .WithMany("Proveedorlista")
                        .HasForeignKey("ProductoProveedorId");

                    b.Navigation("ProductoProveedor");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.HasOne("Dominio.entities.Cliente", "Cliente")
                        .WithMany("Ventalista")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.entities.Cliente", b =>
                {
                    b.Navigation("Ventalista");
                });

            modelBuilder.Entity("Dominio.entities.DetallePedido", b =>
                {
                    b.Navigation("Devolucionlista");
                });

            modelBuilder.Entity("Dominio.entities.Inventario", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("InventarioProductolista");
                });

            modelBuilder.Entity("Dominio.entities.PrecioWeb", b =>
                {
                    b.Navigation("PrecioWeblista");
                });

            modelBuilder.Entity("Dominio.entities.Producto", b =>
                {
                    b.Navigation("DetalleInventariolista");

                    b.Navigation("DetallePedidolista");

                    b.Navigation("PrecioWebProductolista");
                });

            modelBuilder.Entity("Dominio.entities.ProductoProveedor", b =>
                {
                    b.Navigation("InventarioProducto");

                    b.Navigation("Proveedorlista");
                });

            modelBuilder.Entity("Dominio.entities.Proveedor", b =>
                {
                    b.Navigation("Inventariolista");
                });

            modelBuilder.Entity("Dominio.entities.Venta", b =>
                {
                    b.Navigation("DetallePedidolista");
                });
#pragma warning restore 612, 618
        }
    }
}
